// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// account.prisma

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId // Explicit mapping of id to _id
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

// session.prisma

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId // Explicit mapping of id to _id
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime // Use DateTime for storing expiration dates

  user User @relation(fields: [userId], references: [id])
}

model User {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  email                    String    @unique
  password                 String
  userType                 String // "student" or "visitor"
  studentId                String? // Nullable field, only for students
  emailVerified            DateTime? // Add this field to check if the email is verified
  image                    String?
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?
  accounts                 Account[]
  sessions                 Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  // The @@unique directive ensures that the combination of identifier and token is unique
  @@unique([identifier, token])
}
